{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": false,
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "all_contracts = all_instruments(\"Future\")\n",
    "match = r'\\w{1,2}88'\n",
    "continious_contracts = all_contracts[all_contracts.order_book_id.str.contains(match)]\n",
    "continious_contracts = continious_contracts.where(continious_contracts[\"product\"] == \"Commodity\").dropna(how=\"all\")\n",
    "all_commodity = sorted(set(continious_contracts.underlying_symbol))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "continious_contracts.set_index(\"order_book_id\",inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "continious_contracts.symbol.apply(lambda x : x if \"螺纹钢\" in x else np.nan).dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# 螺纹钢，铁矿石，焦炭\n",
    "pairs1 = [\"RB\",\"I\",\"J\"]\n",
    "# 焦煤，焦炭\n",
    "pairs2 = [\"JM\",\"J\"]\n",
    "# 鸡蛋，玉米，豆粕\n",
    "pairs3 = [\"JD\",\"M\",\"C\"]\n",
    "# 强麦，硬麦\n",
    "pairs4 = [\"WH\",\"WT\"]\n",
    "# 银，金\n",
    "pairs5 = [\"AG\",\"AU\"]\n",
    "# 铜，锌\n",
    "pairs6 = [\"CU\",\"ZN\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "pairs = pairs5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def get_efficient(pairs):\n",
    "  close_price = list(map(lambda x: get_price(x+\"88\",\"2015-01-01\",\"2017-01-01\",fields=\"close\"),pairs))\n",
    "  pairs_data = pd.concat([close_price[0],close_price[1]],axis=1).dropna()\n",
    "  pairs_data.columns = [pairs[0],pairs[1]]\n",
    "  params_coef = sm.OLS(pairs_data.iloc[:,1].values,sm.add_constant(pairs_data.iloc[:,0].values)).fit().params\n",
    "  \n",
    "  if params_coef[1]>1:\n",
    "    return {\"x\": pairs[0],\"y\":pairs[1],\"efficient\":int(params_coef[1])}\n",
    "  params_coef = sm.OLS(pairs_data.iloc[:,0].values,sm.add_constant(pairs_data.iloc[:,1].values)).fit().params\n",
    "  if params_coef[1]>1:\n",
    "    return {\"x\": pairs[1],\"y\":pairs[0],\"efficient\":int(params_coef[1])}\n",
    "  \n",
    "  return {\"x\": pairs[0],\"y\":pairs[1],\"efficient\":1}\n",
    "\n",
    "\n",
    "  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "pairs_results = get_efficient(pairs)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'efficient': 15, 'x': 'AU', 'y': 'AG'}"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pairs_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "entry_ratio = 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "y = get_price(pairs_results.get(\"y\")+\"88\",\"2015-01-01\",\"2017-01-01\",fields=\"close\")\n",
    "x = get_price(pairs_results.get(\"x\")+\"88\",\"2015-01-01\",\"2017-01-01\",fields=\"close\")\n",
    "spread = y - x*pairs_results.get(\"efficient\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "spread_avg = spread.rolling(center=False,window=60).mean()\n",
    "spread_std = spread.rolling(center=False,window=60).std()\n",
    "up_point = spread_avg+entry_ratio*spread_std\n",
    "down_point = spread_avg-entry_ratio*spread_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "\n",
    "signal_B = (spread > up_point).astype(int)\n",
    "signal = (spread < down_point).astype(int).replace([0,1],[np.nan,-1]).fillna(signal_B)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "y_chg = y.pct_change()\n",
    "x_chg = x.pct_change()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "combined_data = pd.concat([signal,y_chg,x_chg],axis=1)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
